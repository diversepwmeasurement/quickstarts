jobs:
  deploy:
    env:
      GOVER: 1.17
      KIND_IMAGE_SHA: sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
      KIND_VERSION: v0.12.0
      KUBERNETES_VERSION: v1.21.1
    name: Validate tutorials on ${{ matrix.os }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check out code
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Load environment variables
      uses: artursouza/export-env-action@v2
      with:
        envFile: ./.github/env/global.env
        expand: 'true'
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Pinning Python to ${{ env.MACOS_PYTHON_VERSION }} on MacOS
      run: brew install python@${{ env.MACOS_PYTHON_VERSION }} && brew unlink python@${{
        env.MACOS_PYTHON_VERSION }} && brew link --overwrite python@${{ env.MACOS_PYTHON_VERSION
        }}
    - continue-on-error: true
      name: Verify Python version
      run: python3 --version
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Upgrade pip and setuptools
      run: pip3 install --upgrade pip && python3 -m pip install --upgrade setuptools
    - continue-on-error: true
      name: Show .Net version
      run: dotnet --version
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Install Docker - MacOS
      uses: docker-practice/actions-setup-docker@v1
      with:
        docker_buildx: false
        docker_version: 20.1
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Install Helm - MacOS
      run: brew install helm
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Configure KinD
      run: "cat > kind.yaml <<EOF\napiVersion: kind.x-k8s.io/v1alpha4\nkind: Cluster\n\
        nodes:\n- role: control-plane\n  image: kindest/node:${{ env.KUBERNETES_VERSION\
        \ }}@${{ env.KIND_IMAGE_SHA }}\n- role: worker\n  image: kindest/node:${{\
        \ env.KUBERNETES_VERSION }}@${{ env.KIND_IMAGE_SHA }}\n- role: worker\n  image:\
        \ kindest/node:${{ env.KUBERNETES_VERSION }}@${{ env.KIND_IMAGE_SHA }}\n-\
        \ role: worker\n  image: kindest/node:${{ env.KUBERNETES_VERSION }}@${{ env.KIND_IMAGE_SHA\
        \ }}\n- role: worker\n  image: kindest/node:${{ env.KUBERNETES_VERSION }}@${{\
        \ env.KIND_IMAGE_SHA }}\nEOF\n\n# Log the generated kind.yaml for easy reference.\n\
        cat kind.yaml\n"
      working-directory: ./
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Create KinD Cluster - Linux
      uses: helm/kind-action@v1.2.0
      with:
        cluster_name: kind
        config: kind.yaml
        version: ${{ env.KIND_VERSION }}
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Install minikube - MacOS
      run: 'brew install kubernetes-cli || brew link --overwrite kubernetes-cli

        brew install minikube

        minikube start --driver=virtualbox --memory 8192 --host-only-cidr "192.168.59.1/24"

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Get KinD info
      run: "kubectl cluster-info --context kind-kind\nNODE_IP=$(kubectl get nodes\
        \ \\\n          -lkubernetes.io/hostname!=kind-control-plane \\\n        \
        \  -ojsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}')\n\
        echo \"SERVICE_IP=$NODE_IP\" >> $GITHUB_ENV\n"
    - continue-on-error: true
      name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - continue-on-error: true
      if: matrix.os != 'windows-latest'
      name: Set up Dapr CLI - Mac/Linux
      run: wget -q ${{ env.DAPR_INSTALL_URL }}/install.sh -O - | /bin/bash -s ${{
        env.DAPR_CLI_VERSION }}
    - continue-on-error: true
      if: matrix.os == 'windows-latest'
      name: Set up Dapr CLI - Windows
      run: powershell -Command "\$$script=iwr -useb ${{ env.DAPR_INSTALL_URL }}/install.ps1;
        \$$block=[ScriptBlock]::Create(\$$script); invoke-command -ScriptBlock \$$block
        -ArgumentList ${{ env.DAPR_CLI_VERSION }}"
    - continue-on-error: true
      name: Install Dapr
      run: 'export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

        dapr init --runtime-version=${{ env.DAPR_RUNTIME_VERSION }}

        dapr --version

        '
    - continue-on-error: true
      name: Install Dapr - Kubernetes
      run: 'helm repo add bitnami https://charts.bitnami.com/bitnami

        helm repo update

        helm install redis bitnami/redis --version 17.14.5

        dapr init -k --dev --runtime-version=${{ env.DAPR_RUNTIME_VERSION }} --wait
        || kubectl get pods --all-namespaces

        kubectl get nodes -o wide

        for pod in `dapr status -k | awk ''/dapr/ {print $1}''`; do kubectl describe
        pod -l app=$pod -n dapr-system ; kubectl logs -l app=$pod -n dapr-system;
        done

        '
    - continue-on-error: true
      name: Install utilities dependencies
      run: 'echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV

        pip3 install setuptools wheel

        pip3 install mechanical-markdown

        '
    - continue-on-error: true
      name: Validate hello-world
      run: 'pushd tutorials/hello-world

        make validate

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate hello-kubernetes multi app run
      run: 'pushd tutorials/hello-kubernetes

        make validate_multi_app_run

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate hello-kubernetes normal run
      run: 'pushd tutorials/hello-kubernetes

        make validate_normal_run

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate distributed-calculator
      run: 'pushd tutorials/distributed-calculator

        make validate

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate pub-sub
      run: 'pushd tutorials/pub-sub

        make validate

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate bindings
      run: 'pushd tutorials/bindings

        make validate

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate secretstore
      run: 'pushd tutorials/secretstore

        make validate

        popd

        '
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Validate observability
      run: 'pushd tutorials/observability

        make validate

        popd

        '
    - continue-on-error: true
      name: Linkcheck README.md
      run: 'make validate

        '
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
    timeout-minutes: 40
name: Validate Tutorials
on:
  repository_dispatch:
    types: trigger-ga___validate.yaml
